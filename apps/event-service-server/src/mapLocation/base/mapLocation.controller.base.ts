/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MapLocationService } from "../mapLocation.service";
import { MapLocationCreateInput } from "./MapLocationCreateInput";
import { MapLocation } from "./MapLocation";
import { MapLocationFindManyArgs } from "./MapLocationFindManyArgs";
import { MapLocationWhereUniqueInput } from "./MapLocationWhereUniqueInput";
import { MapLocationUpdateInput } from "./MapLocationUpdateInput";

export class MapLocationControllerBase {
  constructor(protected readonly service: MapLocationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MapLocation })
  async createMapLocation(
    @common.Body() data: MapLocationCreateInput
  ): Promise<MapLocation> {
    return await this.service.createMapLocation({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        address: true,
        latitude: true,
        longitude: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MapLocation] })
  @ApiNestedQuery(MapLocationFindManyArgs)
  async mapLocations(@common.Req() request: Request): Promise<MapLocation[]> {
    const args = plainToClass(MapLocationFindManyArgs, request.query);
    return this.service.mapLocations({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        address: true,
        latitude: true,
        longitude: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MapLocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mapLocation(
    @common.Param() params: MapLocationWhereUniqueInput
  ): Promise<MapLocation | null> {
    const result = await this.service.mapLocation({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        address: true,
        latitude: true,
        longitude: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MapLocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMapLocation(
    @common.Param() params: MapLocationWhereUniqueInput,
    @common.Body() data: MapLocationUpdateInput
  ): Promise<MapLocation | null> {
    try {
      return await this.service.updateMapLocation({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          address: true,
          latitude: true,
          longitude: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MapLocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMapLocation(
    @common.Param() params: MapLocationWhereUniqueInput
  ): Promise<MapLocation | null> {
    try {
      return await this.service.deleteMapLocation({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          address: true,
          latitude: true,
          longitude: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/advertisements")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetAdvertisementsByLocation(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.GetAdvertisementsByLocation(body);
  }
}
