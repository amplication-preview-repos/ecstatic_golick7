/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MapLocation } from "./MapLocation";
import { MapLocationCountArgs } from "./MapLocationCountArgs";
import { MapLocationFindManyArgs } from "./MapLocationFindManyArgs";
import { MapLocationFindUniqueArgs } from "./MapLocationFindUniqueArgs";
import { CreateMapLocationArgs } from "./CreateMapLocationArgs";
import { UpdateMapLocationArgs } from "./UpdateMapLocationArgs";
import { DeleteMapLocationArgs } from "./DeleteMapLocationArgs";
import { MapLocationService } from "../mapLocation.service";
@graphql.Resolver(() => MapLocation)
export class MapLocationResolverBase {
  constructor(protected readonly service: MapLocationService) {}

  async _mapLocationsMeta(
    @graphql.Args() args: MapLocationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MapLocation])
  async mapLocations(
    @graphql.Args() args: MapLocationFindManyArgs
  ): Promise<MapLocation[]> {
    return this.service.mapLocations(args);
  }

  @graphql.Query(() => MapLocation, { nullable: true })
  async mapLocation(
    @graphql.Args() args: MapLocationFindUniqueArgs
  ): Promise<MapLocation | null> {
    const result = await this.service.mapLocation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MapLocation)
  async createMapLocation(
    @graphql.Args() args: CreateMapLocationArgs
  ): Promise<MapLocation> {
    return await this.service.createMapLocation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MapLocation)
  async updateMapLocation(
    @graphql.Args() args: UpdateMapLocationArgs
  ): Promise<MapLocation | null> {
    try {
      return await this.service.updateMapLocation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MapLocation)
  async deleteMapLocation(
    @graphql.Args() args: DeleteMapLocationArgs
  ): Promise<MapLocation | null> {
    try {
      return await this.service.deleteMapLocation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async GetAdvertisementsByLocation(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetAdvertisementsByLocation(args);
  }
}
